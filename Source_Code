#include<iostream>
#include<cstdlib>
#include<ctime>

using namespace std;

int BatteryLevel() {
	int battery_level = (rand() % 85) + 15;
	return battery_level;
}

string WeatherInfo() {
	string weather;
	int random_number = rand() % 3;
	switch (random_number) {
	case 0:
		weather = "sunny";
		break;
	case 1:
		weather = "windy";
		break;
	case 2:
		weather = "rainy";
		break;
	}
	return weather;
}

bool Check_For_Obstacle() {
	bool obstacle_result;
	int obstacle = (rand() % 2);// no of choices = number after modulo
	if (obstacle == 0) {
		obstacle_result = false;
	}
	else {
		obstacle_result = true;
	}
	return obstacle_result;
}

int Battery_Drain() {
	//to keep in between 10 & 25 as per the qs req
	int battery_drain = (rand() % 21) + 10;
	return battery_drain;
}

void intro(int& battery, string& weather, string& start) {
	//& modifies the actual variables from main
	//I created variables as parameters in the intro function
	//these 2 lines store values in them from the other functions

	battery = BatteryLevel();
	weather = WeatherInfo();
	cout << "********** Welcome to the Delivery Program! ********** \n";
	cout << endl;
	cout << "System Information is as follows: \n";
	cout << "Battery: " << battery << " %\n";
	cout << "Current Weather: " << weather;
	cout << endl;
	cout << "Do you want to start today's delivery? \n";
	cout << "Type 'yes' to proceed \n";
	cin >> start;
	cout << endl;
}

void summary(int successful, int delayed, int failed, int battery) {
	cout << "\n";
	cout << " ********** DAILY SUMMARY **********\n";
	cout << "Today's Operation Summary is as Follows: \n";
	cout << "Successful Deliveries: " << successful << endl;
	cout << "Delayed Deliveries: " << delayed << endl;
	cout << "Failed Deliveries: " << failed << endl;
	cout << "Remaining Battery: " << battery << " %\n";
	cout << " ***************************************\n";
}


int main() {
	srand(time(NULL));
	string status, start, weather;
	int battery;

	intro(battery, weather, start);

	if (start == "yes" || start == "Yes" || start == "YES") {

		int successful = 0;
		int delayed = 0;
		int failed = 0;
		string location;

		for (int i = 1; i <= 3; i++) {
			if (i == 1) {
				cout << "Delivery # " << i << " \n" << "Delivering to Location 'A'\n";
			}
			else if (i == 2) {
				cout << "Delivery # " << i << " \n" << "Delivering to Location 'B'\n";
			}
			else if (i == 3) {
				cout << "Delivery # " << i << " \n" << "Delivering to Location 'C'\n";
			}
			//safety check to exit early if req
			if (battery <= 0) {
				cout << "Battery Critically Low!";
				failed += 1;
				break;
			}

			//generating new cases for each delivery to get randomness
			weather = WeatherInfo();
			bool obstacle = Check_For_Obstacle();
			int battery_drain = Battery_Drain();

			//displaying conditions to the user
			cout << "Battery: " << battery << " %\n";
			cout << "Current Weather: " << weather << endl;


			if (weather == "rainy") {
				cout << "Delivery delayed due to Rainy Weather." << endl;
				delayed += 1;
			}

			else if (weather == "windy" && battery < 40) {
				cout << "Battery is low for safe operation in windy weather.\n";
				cout << "Do you want to recharge the battery? (yes/no) ";
				string recharge_choice;
				cin >> recharge_choice;
				if (recharge_choice == "yes" || recharge_choice == "YES" || recharge_choice == "Yes") {
					battery += 10;
					cout << "Returning To The Base To recharge.\n";
					cout << "Current Battery Level: " << battery << endl;

					//attempting the delivery after recharging. Now this line of code updates the battery used during delivery
					battery -= battery_drain;
					//now we'll see what value was left after flight
					if (battery > 0) {
						cout << "Battery sufficiently recharged to resume delivery.\n";

						cout << "Path clear, System functional. Performing Delivery Successfully!\n";
						successful += 1;
					}
					else {
						cout << "Battery too low to resume delivery.\n";
						cout << "Delivery Failed";
						failed += 1;
						break;
					}
				}
				else {
					cout << "Delivery delayed due to low Battery.\n";
					delayed += 1;
				}
			}

			else if (obstacle == true) {
				cout << "Obstacle Detected! Rerouting.....\n ";
				battery_drain += 5;
				battery -= battery_drain;
				if (battery > 0) {
					cout << " Delivery Successful After Rerouting.\n";
					successful += 1;
				}
				else {
					cout << "Battery too low to resume delivery.\n";
					cout << "Delivery Failed";
					failed += 1;
					break;
				}
			}

			else {
				status = "Path clear, System functional. Performing Delivery Successfully!\n";
				cout << "Current Delivery Status: " << status << endl;
				cout << "\n";
				cout << "Delivery Successful!";
				battery -= battery_drain;
				successful += 1;
			}

		}
		summary(successful, delayed, failed, battery);
	}
	return 0;
}


